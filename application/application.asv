% ITER Computer-Assisted Teleoperation using Stereo Reconstruction and ICP
%  
% Application requires two connected GENTL cameras. 
% It has several modes: 
%  - Video mode shows output from the cameras as well as allow to make
%    shots  (those are required for Stereoscopic and Hand-to-eye calibration)
%  - Depth mode uses Stereoscopic calibration parameters to estimate Depth
%    of the scene and show it in a separate placeholder. It could be used to
%  validate correctness of calibration.
%  - Tracking mode uses full chain alignment in order to discover Knuckle 
%   in the scene and estimate it's pose. 
%  - Fast tracking only uses ICP with pre-calulated model point cloud. 
% 
%   Tracking provides coordinates of the interest point in tool coordinate system.   
%   If tracking is succesfull, first placeholder will show an aquired image 
%   well aligned with the rendered CAD-model image. 
% 
%   Tool can be selected with a separate radio-box. Inspection mode assumes
%   no tool. Hence, found knuckle position is shown in Flange (last-joint) 
%   coordinate system. There is also no specific interest point, so origin
%   of a CAD model is assumed.

function varargout = application(varargin)

clc
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @application_OpeningFcn, ...
                   'gui_OutputFcn',  @application_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
end
% End initialization code - DO NOT EDIT


% --- Executes just before application is made visible.
function application_OpeningFcn(hObject, ~, handles, varargin)

    addpath(genpath('..\libs'));

    %handles.setup = 1; % my stereo-camera setup
    handles.setup = 2; % hydraulics Lab stereo-camera setup
    handles.takecoords = 1;

    % Choose default command line output for application
    handles.output = hObject;
    %handles.hudpr = dsp.UDPReceiver('LocalIPPort',35001);
    %setup(handles.hudpr);
    handles.mode = 0;
    handles.takeImages = 0;
    handles.images = 1;
    handles.XYZABC = [];
    handles.Xworld = eye(4);
    
    handles.PinTool  = eye(4);
    handles.JackTool = [eye(3), [210; -332; 0]; 0 0 0 1];
    handles.Tool = handles.PinTool; % initialized as PinTool
    
    loadedValues = load(['stereoParams',num2str(handles.setup),'.mat'], 'stereoParams');
    handles.stereoParams = loadedValues.stereoParams;        
    
    params2 = load(['hand2eye',num2str(handles.setup),'.mat']); 
    %params2 = load(['hand2eye.mat']); 
    handles.X = params2.X2;
    

    %filename = '..\STL\Knuckle_cut_to_size2.stl'; 
    filename = '..\STL\knuckle+Cassete2.stl'; 
    %filename = '..\STL\mockup3.stl'; 
    RTmat = [rodrigues([0 0 0]), [0 0 0]'; 0 0 0 1];
    [f, v] = load_CAD_model(filename, RTmat);
    handles.XYZm = load3dPoints('..\STL\knuckle+Cassete.bin');
    handles.f = f;
    handles.v = v;
    handles.w = 960;
    handles.h = 540;
    %handles.w = 1920;
    %handles.h = 1080;
    handles.minZ = 300;
    handles.maxZ = 5000;
    handles.layers = 100;
    
    %system('ITERSetup.exe');
    %handles.vid1 = videoinput('gentl', 1, 'RGB8Packed');
    handles.vid1 = videoinput('gentl', 1, 'Mono8');
    handles.vid1.FramesPerTrigger = 1;
    triggerconfig(handles.vid1, 'Manual');
    handles.vid1.TriggerRepeat = Inf;

    %handles.vid2 = videoinput('gentl', 2, 'RGB8Packed');
    handles.vid2 = videoinput('gentl', 2, 'Mono8');
    handles.vid2.FramesPerTrigger = 1;
    triggerconfig(handles.vid2, 'hardware', 'DeviceSpecific', 'DeviceSpecific');
    %triggerconfig(handles.vid2, 'Manual');
    handles.vid2.TriggerRepeat = Inf;

    %vid.TriggerRepeat = Inf;
    handles.imageDir = ['images/',date(),'-', num2str(round(rand()*1000000))];
    status = mkdir(handles.imageDir);
    disp(handles.imageDir);
    disp(status);
    %src.FrameStartTriggerMode = 'On';
    %src.FrameStartTriggerActivation = 'RisingEdge';

    %handles.Tool = eye(4); % Flange to tool transform
    %handles.Tool1 = inv([rodrigues([0 0 pi/4]), rodrigues([0 0 pi/4])*[40, 0, 20]'; 0 0 0 1]);
    %handles.Tool2 = inv([rodrigues([0 0 0.52]), rodrigues([0 0 0.52])*[50, 0, 20]'; 0 0 0 1]);
    
    %handles.FrameOfInterest = eye(4); % center of a model
    %handles.Frame1 = [eye(3), [140, 130, -40]'; 0 0 0 1]; % point of interest for wrench tool
    %handles.Frame2 = [rodrigues([0 0 pi*20/180]), [[-80, 250, -40]]'; 0 0 0 1]; % point of interest for second tool    
    %handles.KnucklePosition = [0 0 0 0 0 0];
    %handles.xyzabc2rtmat = @(x) ([eul2rotm([x(4) x(5) x(6)], 'ZYZ'), [x(1) x(2) x(3)]'; 0 0 0 1]);
    %handles.rtmat2xyzabc = @(x) ([x(1,4) x(2,4) x(3,4), rotm2eul([x(1:3,1:3)], 'ZYZ')]);
    %handles.xyzaer2rotm = @(x) ([eul2rotm(pi * [x(4) x(5) x(6)] / 180, 'ZYZ'), [x(1) x(2) x(3)]'; 0 0 0 1]);
    %handles.SavedPose1 = xyzaer2rotm([1212.763 1258.115 1108.814 51.970 130.230 113.008]);
    
    handles.updatePosition = 0;
    handles.positions = 0;
    
    % Update handles structure
    guidata(hObject, handles);

end

% --- Executes when user attempts to close figure1.
function figure1_CloseRequestFcn(hObject, ~, handles)
    %release(handles.hudpr);    
    handles.mode = 0;
    guidata(hObject, handles);
    
    try  
        stop(handles.vid1);
        stop(handles.vid2);        
        pause(3);
        delete(handles.vid1);
        delete(handles.vid2);
    catch
    end
    
    delete(hObject);
end


% ---  Calibration
function pushbutton1_Callback(hObject, ~, handles)
    
    h = handles.h;
    w = handles.w;
    
    % calibrate and save params
    if handles.mode == 0 && handles.images > 5 % here we only require at least "some" images. 
        
            handles.pushbutton1.String = '... Please Wait ...';            
            handles.pushbutton2.Enable = 'off';
            handles.pushbutton3.Enable = 'off';
            handles.pushbutton4.Enable = 'off';
            handles.pushbutton5.Enable = 'off';
            handles.pushbutton7.Enable = 'off';
            disp('Performing Stereoscopic Calibration ...');
            drawnow;
            imageFileNames1 = {};
            imageFileNames2 = {};
            for i=1:(handles.images-1)
                imageFileNames1{i} = [handles.imageDir,'/1_', num2str(i),'.png'];
                imageFileNames2{i} = [handles.imageDir,'/2_', num2str(i),'.png'];
            end
            [imagePoints, boardSize, pairsUsed1] = detectCheckerboardPoints(imageFileNames1, imageFileNames2);
            disp('Automatically found BoardSize:');   
            disp(boardSize);
            % Generate world coordinates of the checkerboard keypoints
            squareSize = 25;  % in units of 'mm'
            worldPoints = generateCheckerboardPoints(boardSize, squareSize);

            % Calibrate the camera
            [stereoParams, pairsUsed2, ~] = estimateCameraParameters(imagePoints, worldPoints, ...
                'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
                'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'mm');

            save(['stereoParams',num2str(handles.setup),'.mat'], 'stereoParams');
            handles.stereoParams = stereoParams;
            saveStereoParameters(stereoParams, ['prosilica_cameras',num2str(handles.setup),'.txt']);  
            disp('Sterescopic calibration done!');
            disp('Now proceed with the HandEye Calibration ... ');
            
            % Hand-Eye calibration
            XYZABC = load([handles.imageDir, '\XYZABC.mat'], 'XYZABC');
            XYZABC = XYZABC.XYZABC;
            
            % 1. preparing frames, which were used in normal calibration
            frames = 1:(size(XYZABC, 1));
            frames = frames(pairsUsed1);
            frames = frames(pairsUsed2);            
            DATA = XYZABC(frames, :); 
            R = stereoParams.CameraParameters1.RotationMatrices;
            T = stereoParams.CameraParameters1.TranslationVectors;                        

            %2. Preparing A & B matrices
            clear A Ai B;
            xyzaer2rotm = @(x) ([angle2dcm( deg2rad(x(6)), deg2rad(x(5)),deg2rad(x(4)) ,'XYZ')', [x(1) x(2) x(3)]'; 0 0 0 1]);
            for i=1:size(R, 3)
                A(:,:,i) = inv([R(:,:,i)', T(i,:)'; 0 0 0 1]);
                Ai(:,:,i) = ([R(:,:,i)', T(i,:)'; 0 0 0 1]);
                B(:,:,i) = xyzaer2rotm(DATA(i, :));
            end
            
            % 3. performing calibration
            X = hand2Eye(B, A);
            [X2, ~] = TSAIleastSquareCalibration(B, Ai);
            [X3, ~] = hand_eye_dual_quaternion(B, Ai);

            % saving and display
            rtmat2xyzaer = @(x) [x(1:3, 4)' , 180/pi*rodrigues(x(1:3, 1:3))'];
            disp(experiment);
            disp('Hand-Eye calibration results 1 & 2 & 3 (X Y Z A E R):');
            disp(num2str(rtmat2xyzaer(X)));
            disp(num2str(rtmat2xyzaer(X2)));
            disp(num2str(rtmat2xyzaer(X3)));
            if save_results > 0
                save(['hand2Eye',num2str(handles.camera_setup),'.mat'], 'X', 'X2', 'X3');
            end
            handles.X = X2;            
        
    end    
    
    handles.mode = 0;
    handles.pushbutton1.String = 'Calibrate System'; 
    handles.pushbutton2.Enable = 'on';
    handles.pushbutton3.Enable = 'on';
    handles.pushbutton4.Enable = 'on';
    handles.pushbutton5.Enable = 'on';
    handles.pushbutton7.Enable = 'on';
            
  
    
    guidata(hObject, handles);
   
end


% --- Start Depth.
function pushbutton2_Callback(hObject, ~, handles)
    
    
    if handles.mode == 0 && strcmp(handles.vid1.Running,'off') && strcmp(handles.vid2.Running,'off')
        handles.pushbutton1.Enable = 'off';
        handles.pushbutton2.String = 'Stop Depth';    
        handles.pushbutton3.Enable = 'off';        
        handles.pushbutton4.Enable = 'off';
        handles.pushbutton5.Enable = 'off';
        handles.pushbutton7.Enable = 'off';
        handles.mode = 2;
        
        handles.vid2.FramesAcquiredFcnCount = 1;
        handles.vid2.FramesAcquiredFcn = {'application_depth', handles};
        guidata(hObject, handles);
        %get(handles.vid1)
        start(handles.vid1);
        start(handles.vid2);
        tic;
        trigger(handles.vid1);    

    elseif handles.mode == 2
        if handles.images > 5 
            handles.pushbutton1.Enable = 'on';
        end
        handles.pushbutton2.String = 'Start Depth';            
        handles.pushbutton3.Enable = 'on';
        handles.pushbutton4.Enable = 'on';        
        handles.pushbutton5.Enable = 'on';
        handles.pushbutton7.Enable = 'on';
        handles.mode = 0;
        stop(handles.vid1);
        stop(handles.vid2);
        guidata(hObject, handles);
    else 
        handles.mode = 0;
    end
   
end


% --- Detect Object (aka Inspection)
function pushbutton4_Callback(hObject, eventdata, handles)
    if handles.mode == 0 && strcmp(handles.vid1.Running,'off') && strcmp(handles.vid2.Running,'off')
        handles.pushbutton1.Enable = 'off';
        handles.pushbutton2.Enable = 'off';
        handles.pushbutton3.Enable = 'off';
        handles.pushbutton4.String = 'Please Wait ...';    
        handles.pushbutton5.Enable = 'off';
        handles.pushbutton7.Enable = 'off';
        
        handles.mode = 4;
        handles.vid2.FramesAcquiredFcnCount = 1;
        %handles.vid2.FramesAcquiredFcn = {'application_tracking', handles};
        handles.vid2.FramesAcquiredFcn = {'application_detection', handles};
        start(handles.vid1);
        start(handles.vid2);
        trigger(handles.vid1);    
        %tic        
        %trigger(handles.vid2);    
        %triggerconfig(handles.vid2, 'Manual');        
        %application_inspection(hObject, eventdata, handles);
        %triggerconfig(handles.vid2, 'hardware', 'DeviceSpecific', 'DeviceSpecific');
        
    else
        stop(handles.vid1);
        stop(handles.vid2);        
        if handles.images > 5
            handles.pushbutton1.Enable = 'on';
        end
        handles.pushbutton2.Enable = 'on';
        handles.pushbutton3.Enable = 'on';
        handles.pushbutton4.String = 'Detect Target';    
        handles.pushbutton5.Enable = 'on';
        handles.pushbutton7.Enable = 'on';
        handles.mode = 0;        
    end

    guidata(hObject, handles);
end


% --- Start Video button 
function pushbutton5_Callback(hObject, eventdata, handles)
    if handles.mode == 0 && strcmp(handles.vid1.Running,'off') && strcmp(handles.vid2.Running,'off')
        handles.pushbutton1.Enable = 'off';
        handles.pushbutton2.Enable = 'off';
        handles.pushbutton3.Enable = 'off';        
        handles.pushbutton4.Enable = 'off';
        handles.pushbutton5.String = 'Stop Video';    
        handles.pushbutton6.Enable = 'on';
        handles.pushbutton7.Enable = 'off';
        handles.mode = 5;

        triggerconfig(handles.vid2, 'hardware', 'DeviceSpecific', 'DeviceSpecific');
        tic
        handles.vid2.FramesAcquiredFcnCount = 1;
        handles.vid2.FramesAcquiredFcn = {'application_video', hObject};
        start(handles.vid1);
        start(handles.vid2);
        trigger(handles.vid1);    
        %trigger(handles.vid2);    
    elseif handles.mode == 5
        % allow calibration only if enough images taken
        if handles.images > 5
            handles.pushbutton1.Enable = 'on';
        end
        handles.pushbutton2.Enable = 'on';
        handles.pushbutton3.Enable = 'on';        
        handles.pushbutton4.Enable = 'on';
        handles.pushbutton5.String = 'Start Video';    
        handles.pushbutton6.Enable = 'off';
        handles.pushbutton7.Enable = 'on';
        handles.mode = 0;
        stop(handles.vid1);
        stop(handles.vid2);
    end

    guidata(hObject, handles);
end

% --- TAKE IMAGE
function pushbutton6_Callback(hObject, eventdata, handles)
    handles = guidata(hObject);
    global takeImages;
    takeImages = 1;
    %handles.takeImages = 1;
    handles.pushbutton6.String = ['Take Image #', num2str(handles.images+1)];
    guidata(hObject, handles);
end

        
% --- FAST TRACKING / 
function pushbutton7_Callback(hObject, eventdata, handles)
    if handles.mode == 0 && handles.takecoords == 1  && strcmp(handles.vid1.Running,'off') && strcmp(handles.vid2.Running,'off')
        handles.pushbutton1.Enable = 'off';
        handles.pushbutton2.Enable = 'off';
        handles.pushbutton3.Enable = 'off';
        handles.pushbutton4.Enable = 'off';    
        handles.pushbutton5.Enable = 'off';
        handles.pushbutton7.String = 'Stop Tracking';         
        handles.mode = 7;
        %triggerconfig(handles.vid2, 'hardware', 'DeviceSpecific', 'DeviceSpecific');
        handles.vid2.FramesAcquiredFcnCount = 1;
        handles.vid2.FramesAcquiredFcn = {'application_fast2', hObject};
        start(handles.vid1);
        start(handles.vid2);
        tic
        trigger(handles.vid1);    
    elseif handles.mode == 7
        % allow calibration only if enough images taken
        if handles.images > 5
            handles.pushbutton1.Enable = 'on';
        end
        handles.pushbutton2.Enable = 'on';
        handles.pushbutton3.Enable = 'on';
        handles.pushbutton4.Enable = 'on';
        handles.pushbutton5.Enable = 'on';        
        handles.pushbutton7.String = 'Start Tracking';    
        handles.mode = 0;
        stop(handles.vid1);
        stop(handles.vid2);
    end
    guidata(hObject, handles);
end


% --- Executes on selection change in popupmenu1.
function popupmenu1_Callback(hObject, ~, handles)

    contents = cellstr(get(hObject,'String'));
    selected = contents{get(hObject,'Value')};
    disp(selected);
    if strcmp(selected, 'Jack-Tool')
        handles.Tool = handles.JackTool;
    else    
        handles.Tool = handles.PinTool;
    end
    
    updateDesiredCoordinates(handles);
    guidata(hObject, handles);
end

    
% --- UPDATE/CALIBRATE TARGET Button
function pushbutton8_Callback(hObject, eventdata, handles)
    disp(num2str(handles.mode))
    global updatePosition;
    if handles.mode == 7        
        updatePosition = 1;
    end
    %handles.KnucklePosition = (handles.SavedPose1)*(handles.X)*(handles.M);
    %updateDesiredCoordinates(handles);
    guidata(hObject, handles);
end

function updateDesiredCoordinates(handles)
    
    if ~isnan(handles.Xworld)
        
        XYZAERworld = rotm2xyzaer_zyz(handles.Xworld*handles.Tool);
        disp('UFRAME position:')
        disp(num2str(XYZAERworld));
        handles.editX.String = num2str(XYZAERworld(1));
        handles.editY.String = num2str(XYZAERworld(2));
        handles.editZ.String = num2str(XYZAERworld(3));
        handles.editAX.String = num2str(XYZAERworld(4));
        handles.editAY.String = num2str(XYZAERworld(5));
        handles.editAZ.String = num2str(XYZAERworld(6));
        
        guidata(handles.editX1, handles);
    end
end



% --- Executes during object creation, after setting all properties.
function editX_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editX (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function editY_Callback(hObject, eventdata, handles)
% hObject    handle to editY (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editY as text
%        str2double(get(hObject,'String')) returns contents of editY as a double


% --- Executes during object creation, after setting all properties.
function editY_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editY (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function editZ_Callback(hObject, eventdata, handles)
% hObject    handle to editZ (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editZ as text
%        str2double(get(hObject,'String')) returns contents of editZ as a double
end

% --- Executes during object creation, after setting all properties.
function editZ_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editZ (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

end

% --- Executes during object creation, after setting all properties.
function editAX_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editAX (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end

function editAY_Callback(hObject, eventdata, handles)
% hObject    handle to editAY (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editAY as text
%        str2double(get(hObject,'String')) returns contents of editAY as a double
end

% --- Executes during object creation, after setting all properties.
function editAY_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editAY (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end

function editAZ_Callback(hObject, eventdata, handles)
% hObject    handle to editAZ (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editAZ as text
%        str2double(get(hObject,'String')) returns contents of editAZ as a double
end

% --- Executes during object creation, after setting all properties.
function editAZ_CreateFcn(hObject, ~, handles)
% hObject    handle to editAZ (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end

% --- Outputs from this function are returned to the command line.
function varargout = application_OutputFcn(hObject, ~, handles) 
varargout{1} = handles.output;
end



function editX1_Callback(hObject, ~, handles)
% hObject    handle to editX1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editX1 as text
%        str2double(get(hObject,'String')) returns contents of editX1 as a double
end

% --- Executes during object creation, after setting all properties.
function editX1_CreateFcn(hObject, ~, handles)
% hObject    handle to editX1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end


function editY1_Callback(hObject, ~, handles)
% hObject    handle to editY1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editY1 as text
%        str2double(get(hObject,'String')) returns contents of editY1 as a double
end

% --- Executes during object creation, after setting all properties.
function editY1_CreateFcn(hObject, ~, handles)
% hObject    handle to editY1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end


function editZ1_Callback(hObject, ~, handles)
% hObject    handle to editZ1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editZ1 as text
%        str2double(get(hObject,'String')) returns contents of editZ1 as a double
end

% --- Executes during object creation, after setting all properties.
function editZ1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editZ1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end



function editAX1_Callback(hObject, eventdata, handles)
% hObject    handle to editAX1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editAX1 as text
%        str2double(get(hObject,'String')) returns contents of editAX1 as a double
end

% --- Executes during object creation, after setting all properties.
function editAX1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editAX1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end


function editAY1_Callback(hObject, eventdata, handles)
% hObject    handle to editAY1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editAY1 as text
%        str2double(get(hObject,'String')) returns contents of editAY1 as a double
end

% --- Executes during object creation, after setting all properties.
function editAY1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editAY1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end


function editAZ1_Callback(hObject, eventdata, handles)
% hObject    handle to editAZ1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editAZ1 as text
%        str2double(get(hObject,'String')) returns contents of editAZ1 as a double
end

% --- Executes during object creation, after setting all properties.
function editAZ1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editAZ1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end

% --- Executes on slider movement.
function sliderRej_Callback(hObject, eventdata, handles)
% hObject    handle to sliderRej (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider
end

% --- Executes during object creation, after setting all properties.
function sliderRej_CreateFcn(hObject, eventdata, handles)
% hObject    handle to sliderRej (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end
end

% --- Executes on slider movement.
function sliderGrad_Callback(hObject, eventdata, handles)
% hObject    handle to sliderGrad (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider
end

% --- Executes during object creation, after setting all properties.
function sliderGrad_CreateFcn(hObject, eventdata, handles)
% hObject    handle to sliderGrad (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end
end

% --- Executes on slider movement.
function SliderColor_Callback(hObject, eventdata, handles)
% hObject    handle to SliderColor (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider
end

% --- Executes during object creation, after setting all properties.
function SliderColor_CreateFcn(hObject, eventdata, handles)
% hObject    handle to SliderColor (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end
end

% --- Executes on slider movement.
function sliderPlane_Callback(hObject, eventdata, handles)
% hObject    handle to sliderPlane (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider
end

% --- Executes during object creation, after setting all properties.
function sliderPlane_CreateFcn(hObject, eventdata, handles)
% hObject    handle to sliderPlane (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end
end

% --- Executes during object creation, after setting all properties.
function popupmenu1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
end
